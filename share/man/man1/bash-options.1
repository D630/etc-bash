.\" Automatically generated by Pandoc 1.17.0.3
.\"
.ad l
.TH "BASHOPTIONS" "1" "September 2016" "bash 4.4" "General Commands Manual"
.hy
.SH NAME
.PP
bashoptions \- bash options
.SH LIST OF OPTIONAL SETTINGS
.PP
In the following list, single letter options used by the set builtin
command are listed in round brackets.
.SS allexport (\-a)
.PP
Mark variables which are modified or created for export.
.SS autocd
.PP
If set, a command name that is the name of a directory is executed as if
it were the argument to the cd command.
This option is only used by interactive shells.
.SS braceexpand (\-B)
.PP
The shell will perform brace expansion.
.SS cdable_vars
.PP
If set, an argument to the cd builtin command that is not a directory is
assumed to be the name of a variable whose value is the directory to
change to.
.SS cdspell
.PP
If set, minor errors in the spelling of a directory component in a cd
command will be corrected.
The errors checked for are transposed characters, a missing character,
and one character too many.
If a correction is found, the corrected filename is printed, and the
command proceeds.
This option is only used by interactive shells.
.SS checkhash
.PP
If set, bash checks that a command found in the hash table exists before
trying to execute it.
If a hashed command no longer exists, a normal path search is performed.
.SS checkjobs
.PP
If set, bash lists the status of any stopped and running jobs before
exiting an interactive shell.
If any jobs are running, this causes the exit to be deferred until a
second exit is attempted without an intervening command (see JOB CONTROL
above).
The shell always postpones exiting if any jobs are stopped.
.SS checkwinsize
.PP
If set, bash checks the window size after each command and, if
necessary, updates the values of LINES and COLUMNS.
.SS cmdhist
.PP
If set, bash attempts to save all lines of a multiple\-line command in
the same history entry.
This allows easy re\-editing of multi\-line commands.
.SS compat31
.PP
If set, bash changes its behavior to that of version 3.1 with respect to
quoted arguments to the [[ conditional command\[aq]s =~ operator and
locale\-specific string comparison when using the [[ conditional
command\[aq]s < and > operators.
Bash versions prior to bash\-4.1 use ASCII collation and strcmp(3);
bash\-4.1 and later use the current locale\[aq]s collation sequence and
strcoll(3).
.SS compat32
.PP
If set, bash changes its behavior to that of version 3.2 with respect to
locale\-specific string comparison when using the [[ conditional
command\[aq]s < and > operators (see previous item) and the effect of
interrupting a command list.
Bash versions 3.2 and earlier continue with the next command in the list
after one terminates due to an interrupt.
.SS compat40
.PP
If set, bash changes its behavior to that of version 4.0 with respect to
locale\-specific string comparison when using the [[ conditional
command\[aq]s < and > operators (see description of compat31) and the
effect of interrupting a command list.
Bash versions 4.0 and later interrupt the list as if the shell received
the interrupt; previous versions continue with the next command in the
list.
.SS compat41
.PP
If set, bash, when in posix mode, treats a single quote in a
double\-quoted parameter expansion as a special character.
The single quotes must match (an even number) and the characters between
the single quotes are considered quoted.
This is the behavior of posix mode through version 4.1.
The default bash behavior remains as in previous versions.
.SS compat42
.PP
If set, bash does not process the replacement string in the pattern
substitution word expansion using quote removal.
.SS compat43
.PP
If set, bash does not print a warning message if an attempt is made to
use a quoted compound array assignment as an argument to declare, makes
word expansion errors non\-fatal errors that cause the current command
to fail (the default behavior is to make them fatal errors that cause
the shell to exit), and does not reset the loop state when a shell
function is executed (this allows break or continue in a shell function
to affect loops in the caller\[aq]s context).
.SS complete_fullquote
.PP
If set, bash quotes all shell metacharacters in filenames and directory
names when performing completion.
If not set, bash removes metacharacters such as the dollar sign from the
set of characters that will be quoted in completed filenames when these
metacharacters appear in shell variable references in words to be
completed.
This means that dollar signs in variable names that expand to
directories will not be quoted; however, any dollar signs appearing in
filenames will not be quoted, either.
This is active only when bash is using backslashes to quote completed
filenames.
This variable is set by default, which is the default bash behavior in
versions through 4.2.
.SS direxpand
.PP
If set, bash replaces directory names with the results of word expansion
when performing filename completion.
This changes the contents of the readline editing buffer.
If not set, bash attempts to preserve what the user typed.
.SS dirspell
.PP
If set, bash attempts spelling correction on directory names during word
completion if the directory name initially supplied does not exist.
.SS dotglob
.PP
If set, bash includes filenames beginning with a .
in the results of pathname expansion.
.SS emacs
.PP
Use an emacs\-style line editing interface.
.SS errexit (\-e)
.PP
Exit immediately if a command exits with a non\-zero status.
.SS errtrace (\-E)
.PP
If set, the ERR trap is inherited by shell functions.
.SS execfail
.PP
If set, a non\-interactive shell will not exit if it cannot execute the
file specified as an argument to the exec builtin command.
An interactive shell does not exit if exec fails.
.SS expand_aliases
.PP
If set, aliases are expanded as described above under ALIASES.
This option is enabled by default for interactive shells.
.SS extdebug
.PP
If set at shell invocation, arrange to execute the debugger profile
before the shell starts, identical to the \-\-debugger option.
If set after invocation, behavior intended for use by debuggers is
enabled:
.IP "1." 3
The \-F option to the declare builtin displays the source file name and
line number corresponding to each function name supplied as an argument.
.IP "2." 3
If the command run by the DEBUG trap returns a non\-zero value, the next
command is skipped and not executed.
.IP "3." 3
If the command run by the DEBUG trap returns a value of 2, and the shell
is executing in a subroutine (a shell function or a shell script
executed by the .
or source builtins), the shell simulates a call to return.
.IP "4." 3
BASH_ARGC and BASH_ARGV are updated as described in their descriptions
above.
.IP "5." 3
Function tracing is enabled: command substitution, shell functions, and
subshells invoked with ( command ) inherit the DEBUG and RETURN traps.
.IP "6." 3
Error tracing is enabled: command substitution, shell functions, and
subshells invoked with ( command ) inherit the ERR trap.
.SS extglob
.PP
If set, the extended pattern matching features described above under
Pathname Expansion are enabled.
.SS extquote
.PP
If set, $\[aq]string\[aq] and $"string" quoting is performed within
${parameter} expansions enclosed in double quotes.
This option is enabled by default.
.SS failglob
.PP
If set, patterns which fail to match filenames during pathname expansion
result in an expansion error.
.SS force_fignore
.PP
If set, the suffixes specified by the FIGNORE shell variable cause words
to be ignored when performing word completion even if the ignored words
are the only possible completions.
See SHELL VARIABLES above for a description of FIGNORE.
This option is enabled by default.
.SS functrace (\-T)
.PP
If set, the DEBUG and RETURN traps are inherited by shell functions.
.SS globasciiranges
.PP
If set, range expressions used in pattern matching bracket expressions
(see Pattern Matching above) behave as if in the traditional C locale
when performing comparisons.
That is, the current locale\[aq]s collating sequence is not taken into
account, so b will not collate between A and B, and upper\-case and
lower\-case ASCII characters will collate together.
.SS globstar
.PP
If set, the pattern ** used in a pathname expansion context will match
all files and zero or more directories and subdirectories.
If the pattern is followed by a /, only directories and subdirectories
match.
.SS gnu_errfmt
.PP
If set, shell error messages are written in the standard GNU error
message format.
.SS hashall (\-h)
.PP
Remember the location of commands as they are looked up.
.SS histappend
.PP
If set, the history list is appended to the file named by the value of
the HISTFILE variable when the shell exits, rather than overwriting the
file.
.SS histexpand (\-H)
.PP
Enable ! style history substitution.
This flag is on by default when the shell is interactive.
.SS history
.PP
Enable command history.
.SS histreedit
.PP
If set, and readline is being used, a user is given the opportunity to
re\-edit a failed history substitution.
.SS histverify
.PP
If set, and readline is being used, the results of history substitution
are not immediately passed to the shell parser.
Instead, the resulting line is loaded into the readline editing buffer,
allowing further modification.
.SS hostcomplete
.PP
If set, and readline is being used, bash will attempt to perform
hostname completion when a word containing a \@ is being completed (see
Completing under READLINE above).
This is enabled by default.
.SS huponexit
.PP
If set, bash will send SIGHUP to all jobs when an interactive login
shell exits.
.SS ignoreeof
.PP
The shell will not exit upon reading EOF.
.SS inherit_errexit
.PP
If set, command substitution inherits the value of the errexit option,
instead of unsetting it in the subshell environment.
This option is enabled when posix mode is enabled.
.SS interactive_comments
.PP
If set, allow a word beginning with # to cause that word and all
remaining characters on that line to be ignored in an interactive shell
(see COMMENTS above).
This option is enabled by default.
.SS interactive\-comments
.PP
Allow comments to appear in interactive commands.
.SS keyword (\-k)
.PP
All assignment arguments are placed in the environment for a command,
not just those that precede the command name.
.SS lastpipe
.PP
If set, and job control is not active, the shell runs the last command
of a pipeline not executed in the background in the current shell
environment.
.SS lithist
.PP
If set, and the cmdhist option is enabled, multi\-line commands are
saved to the history with embedded newlines rather than using semicolon
separators where possible.
.SS login_shell
.PP
The shell sets this option if it is started as a login shell (see
INVOCATION above).
The value may not be changed.
.SS mailwarn
.PP
If set, and a file that bash is checking for mail has been accessed
since the last time it was checked, the message "The mail in mailfile
has been read" is displayed.
.SS monitor (\-m)
.PP
Job control is enabled.
.SS no_empty_cmd_completion
.PP
If set, and readline is being used, bash will not attempt to search the
PATH for possible completions when completion is attempted on an empty
line.
.SS nocaseglob
.PP
If set, bash matches filenames in a case\-insensitive fashion when
performing pathname expansion (see Pathname Expansion above).
.SS nocasematch
.PP
If set, bash matches patterns in a case\-insensitive fashion when
performing matching while executing case or [[ conditional commands,
when performing pattern substitution word expansions, or when filtering
possible completions as part of programmable completion.
.SS noclobber (\-C)
.PP
If set, disallow existing regular files to be overwritten by redirection
of output.
.SS noexec (\-n)
.PP
Read commands but do not execute them.
.SS noglob (\-f)
.PP
Disable file name generation (globbing).
.SS nolog
.PP
Currently accepted but ignored.
.SS notify (\-b)
.PP
Notify of job termination immediately.
.SS nounset (\-u)
.PP
Treat unset variables as an error when substituting.
.SS nullglob
.PP
If set, bash allows patterns which match no files (see Pathname
Expansion above) to expand to a null string, rather than themselves.
.SS onecmd (\-t)
.PP
Exit after reading and executing one command.
.SS physical (\-P)
.PP
If set, do not resolve symbolic links when executing commands such as cd
which change the current directory.
.SS pipefail
.PP
The return value of a pipeline is the status of the last command to exit
with a non\-zero status, or zero if no command exited with a non\-zero
status.
.SS posix
.PP
Change the behavior of bash where the default operation differs from the
Posix standard to.
.SS privileged (\-p)
.PP
Turned on whenever the real and effective user ids do not match.
Disables processing of the $ENV file and importing of shell functions.
Turning this option off causes the effective uid and gid to be set to
the real uid and gid.
.SS progcomp
.PP
If set, the programmable completion facilities (see Programmable
Completion above) are enabled.
This option is enabled by default.
.SS promptvars
.PP
If set, prompt strings undergo parameter expansion, command
substitution, arithmetic expansion, and quote removal after being
expanded as described in PROMPTING above.
This option is enabled by default.
.SS restricted_shell
.PP
The shell sets this option if it is started in restricted mode (see
RESTRICTED SHELL below).
The value may not be changed.
This is not reset when the startup files are executed, allowing the
startup files to discover whether or not a shell is restricted.
.SS shift_verbose
.PP
If set, the shift builtin prints an error message when the shift count
exceeds the number of positional parameters.
.SS sourcepath
.PP
If set, the source (.) builtin uses the value of PATH to find the
directory containing the file supplied as an argument.
This option is enabled by default.
.SS verbose (\-v)
.PP
Print shell input lines as they are read.
.SS vi
.PP
Use a vi\-style line editing interface.
.SS xpg_echo
.PP
If set, the echo builtin expands backslashescape sequences by default.
.SS xtrace (\-x)
.PP
Print commands and their arguments as they are executed.
